<?php
// $Id: notifications.module,v 1.6.2.9.2.50.2.18.2.67 2010/07/22 11:57:49 jareyero Exp $

/**
 * @file
 * Notifications module
 *
 * This is the base module of the notifications framework. It handles event processing, queueing,
 * message composition and sending.
 * 
 * Different subscriptions types are provided by plug-in modules implementing hook_notifications()
 * Most of the UI is implemented in notifications_ui module
 * The messaging framework is used for message delivery
 * Token module is used for token replacement in messages 
 * 
 * This is based on the previous subscriptions module
 * 
 * Development Seed, http://www.developmentseed.org, 2007 
 *
 */

/**
 * Implementation of hook_notifications()
 */
function notifications_scheduler_notifications($op) {
  switch ($op) {
    case 'event types':
      $types['notifications_scheduler-latest_posts'] = array(
        'type' => 'notifications_scheduler',
        'action' => 'latest_posts',
        'title' => t('Latest posts'),
        'class' => 'Notifications_Scheduler_Latest_Posts',
        'template' => 'notifications_scheduler-node_list',
        // Type of trigger that throws these events
        'trigger' => 'job_scheduler',
        'actions' => array('notifications_scheduler_latest_posts_action'),
      );
      return $types;
    case 'message templates':
      $types['notifications_scheduler-node_list'] = array(
        'title' => t('Node list'),
        'class' => 'Notifications_Scheduler_Node_List',
      );
      $types['notifications_scheduler-node_teasers'] = array(
        'title' => t('Node teasers'),
        'class' => 'Notifications_Scheduler_Node_Teasers',
      );
      return $types;
  }
}

/**
 * Implementation of hook_action_info()
 */
function notifications_scheduler_action_info() {
  $actions = array();
  foreach (notifications_info('event types') as $key => $info) {
    if ($info['trigger'] == 'job_scheduler' && !empty($info['actions'])) {
      // Does it make sense for these events to have more than one action?
      foreach ($info['actions'] as $action_name) {
        $actions[$action_name] = notifications_event($info['type'], $info['action'])->get_action_info();
      }
    }
  }
  return $actions;
  /*
  return array(
    'notifications_scheduler_latest_posts_action' => array(
      'type' => 'job_scheduler',
      'label' => t('Scheduled notification: @name', array('@name' =>  t('Latest posts'))),
      'configurable' => TRUE,
      'behavior' => array('sends_notification'),
      'triggers' => array('any'),
    ),
  );
  */
}

/**
 * Action: Configuration form
 */
function notifications_scheduler_latest_posts_action_form($context) {
  $form['type'] = array(
    '#title' => t('Content type'),
    '#type' => 'select',
    '#options' => array('' => t('All types')) + node_type_get_names(),
    '#default_value' => isset($context['type']) ? $context['type'] : '',
  );
  // Terms is an array of tids, map to names for autocomplete field
  if (!empty($context['terms'])) {
    $terms = implode(', ', array_map('taxonomy_term_title', taxonomy_term_load_multiple($context['terms'])));
  }
  else {
    $terms = '';
  }
  $form['term'] = array(
    '#title' => t('Taxonomy term'),
    '#type' => 'textfield',
    '#default_value' => $terms,
    '#autocomplete_path' => 'notifications_tags/autocomplete/simple',
    '#element_validate' => array('notifications_tags_autocomplete_validate'),
  );
  $form['number'] = array(
    '#title' => t('Number of items to send'),
    '#type' => 'select',
    '#default_value' => isset($context['number']) ? $context['number'] : variable_get('default_nodes_main', 10),
    '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30)),
  );
  return $form;
}

/**
 * Action: Configuration form submit
 */
function notifications_scheduler_latest_posts_action_submit($form, &$form_state) {
  // Process the HTML form to store configuration. The keyed array that
  // we return will be serialized to the database.
  $params = array(
    'type' => $form_state['values']['type'],
    'terms'   => $form_state['values']['term'],
    'number'   => $form_state['values']['number'],
  );
  return $params;
}

/**
 * Action callback
 * 
 * @param $job,
 *   Job object from job_scheduler
 */
function notifications_scheduler_latest_posts_action($job, $context, $a1, $a2) {
  watchdog('notifications_scheduler', 'Job: !object', array('!object' => print_r($job, TRUE)));
  watchdog('notifications_scheduler', 'Context: !object', array('!object' => print_r($context, TRUE)));
 
  notifications_event('notifications_scheduler', 'latest_posts')
    ->set_action($job, $context)
    ->trigger();
}
